precision mediump float;
varying vec2 v_texCoord;
uniform sampler2D u_Texture;
void main() {
float[169] weights;/*13*/
weights[0] = 0.00000492039284957;
weights[1] = 0.00001946053122695;
weights[2] = 0.00005994265617415;
weights[3] = 0.00014379495695092;
weights[4] = 0.00026864434702271;
weights[5] = 0.00039087521850375;
weights[6] = 0.00044291964918968;
weights[7] = 0.00039087521850375;
weights[8] = 0.00026864434702271;
weights[9] = 0.00014379495695092;
weights[10] = 0.00005994265617415;
weights[11] = 0.00001946053122695;
weights[12] = 0.00000492039284957;
weights[13] = 0.00001946053122695;
weights[14] = 0.00007696789407138;
weights[15] = 0.00023707780414440;
weights[16] = 0.00056872008710997;
weights[17] = 0.00106250900365370;
weights[18] = 0.00154594147827067;
weights[19] = 0.00175178119463425;
weights[20] = 0.00154594147827067;
weights[21] = 0.00106250900365370;
weights[22] = 0.00056872008710997;
weights[23] = 0.00023707780414440;
weights[24] = 0.00007696789407138;
weights[25] = 0.00001946053122695;
weights[26] = 0.00005994265617415;
weights[27] = 0.00023707780414440;
weights[28] = 0.00073025104683007;
weights[29] = 0.00175178119463425;
weights[30] = 0.00327275813518123;
weights[31] = 0.00476183498881057;
weights[32] = 0.00539586595133019;
weights[33] = 0.00476183498881057;
weights[34] = 0.00327275813518123;
weights[35] = 0.00175178119463425;
weights[36] = 0.00073025104683007;
weights[37] = 0.00023707780414440;
weights[38] = 0.00005994265617415;
weights[39] = 0.00014379495695092;
weights[40] = 0.00056872008710997;
weights[41] = 0.00175178119463425;
weights[42] = 0.00420230462824428;
weights[43] = 0.00785093863361609;
weights[44] = 0.01142304830860577;
weights[45] = 0.01294400952020426;
weights[46] = 0.01142304830860577;
weights[47] = 0.00785093863361609;
weights[48] = 0.00420230462824428;
weights[49] = 0.00175178119463425;
weights[50] = 0.00056872008710997;
weights[51] = 0.00014379495695092;
weights[52] = 0.00026864434702271;
weights[53] = 0.00106250900365370;
weights[54] = 0.00327275813518123;
weights[55] = 0.00785093863361609;
weights[56] = 0.01466748436430172;
weights[57] = 0.02134106382410571;
weights[58] = 0.02418259345908580;
weights[59] = 0.02134106382410571;
weights[60] = 0.01466748436430172;
weights[61] = 0.00785093863361609;
weights[62] = 0.00327275813518123;
weights[63] = 0.00106250900365370;
weights[64] = 0.00026864434702271;
weights[65] = 0.00039087521850375;
weights[66] = 0.00154594147827067;
weights[67] = 0.00476183498881057;
weights[68] = 0.01142304830860577;
weights[69] = 0.02134106382410571;
weights[70] = 0.03105106464289290;
weights[71] = 0.03518546586617211;
weights[72] = 0.03105106464289290;
weights[73] = 0.02134106382410571;
weights[74] = 0.01142304830860577;
weights[75] = 0.00476183498881057;
weights[76] = 0.00154594147827067;
weights[77] = 0.00039087521850375;
weights[78] = 0.00044291964918968;
weights[79] = 0.00175178119463425;
weights[80] = 0.00539586595133019;
weights[81] = 0.01294400952020426;
weights[82] = 0.02418259345908580;
weights[83] = 0.03518546586617211;
weights[84] = 0.03987035621668854;
weights[85] = 0.03518546586617211;
weights[86] = 0.02418259345908580;
weights[87] = 0.01294400952020426;
weights[88] = 0.00539586595133019;
weights[89] = 0.00175178119463425;
weights[90] = 0.00044291964918968;
weights[91] = 0.00039087521850375;
weights[92] = 0.00154594147827067;
weights[93] = 0.00476183498881057;
weights[94] = 0.01142304830860577;
weights[95] = 0.02134106382410571;
weights[96] = 0.03105106464289290;
weights[97] = 0.03518546586617211;
weights[98] = 0.03105106464289290;
weights[99] = 0.02134106382410571;
weights[100] = 0.01142304830860577;
weights[101] = 0.00476183498881057;
weights[102] = 0.00154594147827067;
weights[103] = 0.00039087521850375;
weights[104] = 0.00026864434702271;
weights[105] = 0.00106250900365370;
weights[106] = 0.00327275813518123;
weights[107] = 0.00785093863361609;
weights[108] = 0.01466748436430172;
weights[109] = 0.02134106382410571;
weights[110] = 0.02418259345908580;
weights[111] = 0.02134106382410571;
weights[112] = 0.01466748436430172;
weights[113] = 0.00785093863361609;
weights[114] = 0.00327275813518123;
weights[115] = 0.00106250900365370;
weights[116] = 0.00026864434702271;
weights[117] = 0.00014379495695092;
weights[118] = 0.00056872008710997;
weights[119] = 0.00175178119463425;
weights[120] = 0.00420230462824428;
weights[121] = 0.00785093863361609;
weights[122] = 0.01142304830860577;
weights[123] = 0.01294400952020426;
weights[124] = 0.01142304830860577;
weights[125] = 0.00785093863361609;
weights[126] = 0.00420230462824428;
weights[127] = 0.00175178119463425;
weights[128] = 0.00056872008710997;
weights[129] = 0.00014379495695092;
weights[130] = 0.00005994265617415;
weights[131] = 0.00023707780414440;
weights[132] = 0.00073025104683007;
weights[133] = 0.00175178119463425;
weights[134] = 0.00327275813518123;
weights[135] = 0.00476183498881057;
weights[136] = 0.00539586595133019;
weights[137] = 0.00476183498881057;
weights[138] = 0.00327275813518123;
weights[139] = 0.00175178119463425;
weights[140] = 0.00073025104683007;
weights[141] = 0.00023707780414440;
weights[142] = 0.00005994265617415;
weights[143] = 0.00001946053122695;
weights[144] = 0.00007696789407138;
weights[145] = 0.00023707780414440;
weights[146] = 0.00056872008710997;
weights[147] = 0.00106250900365370;
weights[148] = 0.00154594147827067;
weights[149] = 0.00175178119463425;
weights[150] = 0.00154594147827067;
weights[151] = 0.00106250900365370;
weights[152] = 0.00056872008710997;
weights[153] = 0.00023707780414440;
weights[154] = 0.00007696789407138;
weights[155] = 0.00001946053122695;
weights[156] = 0.00000492039284957;
weights[157] = 0.00001946053122695;
weights[158] = 0.00005994265617415;
weights[159] = 0.00014379495695092;
weights[160] = 0.00026864434702271;
weights[161] = 0.00039087521850375;
weights[162] = 0.00044291964918968;
weights[163] = 0.00039087521850375;
weights[164] = 0.00026864434702271;
weights[165] = 0.00014379495695092;
weights[166] = 0.00005994265617415;
weights[167] = 0.00001946053122695;
weights[168] = 0.00000492039284957;

  vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
  float hscale = 1.0 / 720.0;
  float vscale = 1.0 / 1080.0;
  for (int i = 0; i < 169/*weights.length()*/; i++) {
    vec2 coords = v_texCoord + vec2((float(i-i/13) - 6.0) * hscale, (float(i/13) - 6.0) * vscale);
    color += texture2D(u_Texture, coords) * weights[i];
  }

  gl_FragColor = color;
}